// Generated by CoffeeScript 1.4.0
(function() {
  var Auth, Model, app, auth, cfg, express, isJson, isLoggedIn, model;

  express = require('express');

  Auth = (require('./lib/auth.js')).Auth;

  Model = (require('./lib/model.js')).Model;

  cfg = require('./cfg/config.js');

  app = express();

  app.use(express.bodyParser());

  app.use(express.cookieParser());

  app.use(express.session({
    secret: 'blahblahblah'
  }));

  app.set('views', __dirname + '/views');

  app.engine('jade', require('jade').__express);

  /* Controllers
  */


  auth = new Auth;

  model = new Model;

  /* Routes
  */


  app.get('/', function(req, res) {
    if (!isLoggedIn(req.session)) {
      return res.redirect('/login');
    } else {
      return res.redirect('/model');
    }
  });

  app.get('/login', function(req, res) {
    return auth.login(function(callback) {
      req.session.oauth_token = callback.oauth_token;
      req.session.oauth_token_secret = callback.oauth_token_secret;
      return res.redirect(callback.url);
    });
  });

  app.get('/callback', function(req, res) {
    return auth.handleCallback(req.query.oauth_token, req.session.oauth_token_secret, req.query.oauth_verifier, function(callback) {
      req.session.oauth_access_token = callback.oauth_access_token;
      req.session.oauth_access_token_secret = callback.oauth_access_token_secret;
      return res.redirect('/');
    });
  });

  app.get('/upload', function(req, res) {
    if (!isLoggedIn(req.session)) {
      return res.redirect('/login');
    } else {
      return res.render('model/upload.jade');
    }
  });

  app.post('/model/upload', function(req, res) {
    if (!isLoggedIn(req.session)) {
      return res.redirect('/login');
    } else {
      return model.putModel(req.files.modelUpload, req.session.oauth_access_token, req.session.oauth_access_token_secret, function(callback) {
        return res.render('model/upload_success.jade', {
          "callback": JSON.parse(callback)
        });
      });
    }
  });

  app.get('/model/:id', function(req, res) {
    if (!isLoggedIn(req.session)) {
      return res.redirect('/login');
    } else {
      return model.getModel(req.params.id, req.session.oauth_access_token, req.session.oauth_access_token_secret, function(callback) {
        if (isJson(req.url)) {
          return res.send(JSON.parse(callback));
        } else {
          return res.render('model/id.jade', {
            "callback": JSON.parse(callback)
          });
        }
      });
    }
  });

  app.get('/model*', function(req, res) {
    if (!isLoggedIn(req.session)) {
      return res.redirect('/login');
    } else {
      return model.getModels(req.session.oauth_access_token, req.session.oauth_access_token_secret, function(callback) {
        if (isJson(req.url)) {
          return res.send(JSON.parse(callback));
        } else {
          return res.render('model/index.jade', {
            "callback": JSON.parse(callback)
          });
        }
      });
    }
  });

  app.get('/logout', function(req, res) {
    console.log('--- LOGOUT ---');
    console.log(req.session);
    console.log('--- LOGOUT ---');
    req.session.destroy();
    return res.redirect('/');
  });

  /* Start the App
  */


  app.listen('3000');

  isLoggedIn = function(session) {
    if (!session.oauth_access_token) {
      return false;
    }
    return true;
  };

  isJson = function(url) {
    var json;
    json = false;
    if ((url.substring(url.length - 5)) === ".json") {
      json = true;
    }
    return json;
  };

}).call(this);
